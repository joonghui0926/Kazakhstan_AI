import sensor, image, time, math, lcd
from machine import Timer,PWM
from maix import GPIO
from fpioa_manager import fm

#카메라 초기화
sensor.reset()
sensor.set_vflip(1)
sensor.set_pixformat(sensor.RGB565)
sensor.set_framesize(sensor.QVGA)
sensor.skip_frames(time=2000)

# LCD 디스플레이 초기화
lcd.init()

#버튼 핀 설정
fm.register(9, fm.fpioa.GPIO0, force=True)
fm.register(12, fm.fpioa.GPIO1, force=True)
fm.register(8, fm.fpioa.GPIO2, force=True)

button_1 = GPIO(GPIO.GPIO0, GPIO.IN, GPIO.PULL_UP)
button_2 = GPIO(GPIO.GPIO1, GPIO.IN, GPIO.PULL_UP)
button_3 = GPIO(GPIO.GPIO2, GPIO.IN, GPIO.PULL_UP)

#모터 핀 설정
tim0 = Timer(Timer.TIMER0, Timer.CHANNEL0, mode=Timer.MODE_PWM)
tim1 = Timer(Timer.TIMER0, Timer.CHANNEL1, mode=Timer.MODE_PWM)
tim2 = Timer(Timer.TIMER0, Timer.CHANNEL2, mode=Timer.MODE_PWM)
tim3 = Timer(Timer.TIMER0, Timer.CHANNEL3, mode=Timer.MODE_PWM)

l_motor_ib = PWM(tim0, freq=1000, duty=0, pin=19)
l_motor_ia = PWM(tim1, freq=1000, duty=0, pin=13)
r_motor_ib = PWM(tim2, freq=1000, duty=0, pin=17)
r_motor_ia = PWM(tim3, freq=1000, duty=0, pin=10)

#자동차 이동 함수 정의
def car_go(speed):
    r_motor_ib.duty(0)
    r_motor_ia.duty(speed)

    l_motor_ib.duty(speed)
    l_motor_ia.duty(0)

def car_back(speed):
    r_motor_ib.duty(speed)
    r_motor_ia.duty(0)

    l_motor_ib.duty(0)
    l_motor_ia.duty(speed)

def car_left(speed):
    r_motor_ib.duty(0)
    r_motor_ia.duty(speed)

    l_motor_ib.duty(0)
    l_motor_ia.duty(0)

def car_right(speed):
    r_motor_ib.duty(0)
    r_motor_ia.duty(0)

    l_motor_ib.duty(speed)
    l_motor_ia.duty(0)

def car_turn_left(speed):
    r_motor_ib.duty(0)
    r_motor_ia.duty(speed)

    l_motor_ib.duty(0)
    l_motor_ia.duty(speed)

def car_turn_right(speed):
    r_motor_ib.duty(speed)
    r_motor_ia.duty(0)

    l_motor_ib.duty(speed)
    l_motor_ia.duty(0)

# 검은 선을 추적합니다. (흰색 선을 추적하려면 [(128, 255)]를 사용합니다.)
GRAYSCALE_THRESHOLD = [(0, 64)]

ROIS = [
        (0, 100, 160, 20, 0.7),
        (0,  50, 160, 20, 0.3),
        (0,   0, 160, 20, 0.1)
       ]

weight_sum = 0
for r in ROIS:
    weight_sum += r[4]

car_go_stop = "stop"
while(True):
    img = sensor.snapshot()
    trac_img = img.resize(160, 120)
    trac_img = trac_img.to_grayscale()

    centroid_sum = 0

    for r in ROIS:
        blobs = trac_img.find_blobs(GRAYSCALE_THRESHOLD, roi=r[0:4], merge=True)
        if blobs:
            largest_blob = max(blobs, key=lambda b: b.pixels())
            trac_img.draw_rectangle(largest_blob.rect())
            trac_img.draw_cross(largest_blob.cx(),largest_blob.cy())
            #print(blobs)
            centroid_sum += largest_blob.cx() * r[4] # r[4]는 ROI 가중치입니다.

    center_pos = (centroid_sum / weight_sum) # 선의 중심을 결정합니다.

    # 각도 계산
    deflection_angle = 0
    deflection_angle = -math.atan((center_pos-80)/60)
    deflection_angle = math.degrees(deflection_angle)

    if button_2.value() == 0:
        car_go_stop = "go"
    elif button_1.value() == 0 or button_3.value() == 0:
        car_go_stop = "stop"

    if car_go_stop == "go":
        img.draw_string(10, 100, "button1 or 3 click stop",color=(255,255,255),scale=1)
        if deflection_angle >= 30:
            print("right")
            trac_img.draw_string(10, 10, "right",color=(255,255,255),scale=2)
            car_right(40)
        elif deflection_angle <= -30:
            print("left")
            trac_img.draw_string(10, 10, "left",color=(255,255,255),scale=2)
            car_left(40)
        else:
            print("go")
            trac_img.draw_string(10, 10, "go",color=(255,255,255),scale=2)
            car_go(40)
    else:
        trac_img.draw_string(10, 100, "button2 click start",color=(255,255,255),scale=1)
        car_go(0)

    lcd.display(trac_img)

